{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Tetris.min.js","webpack:///webpack/bootstrap e4d228ce70614ab2deb4","webpack:///./src/index.js","webpack:///./src/Tetrominos.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_Tetrominos","KEY","ESC","SPACE","LEFT","UP","RIGHT","DOWN","coloursMap","E","B","O","P","R","Y","C","G","Tetris","canvas","_this","rows","columns","height","window","innerHeight","width","scaleFactor","ctx","getContext","speed","score","gameBoard","currentTet","resetGameBoard","document","addEventListener","ev","keyDown","resizeCanvas","rowsTemp","Array","fill","push","renderGameBoard","x","y","colour","scaledX","scaledY","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","font","textAlign","fillText","colourOfBlock","drawRect","drawScore","insertTetromino","piece","n","matrix","boardXOffset","boardYOffset","bounds","Error","e","clearTetromino","copyPiece","Tetromino","orientation","rotate","validMove","bottomEmpty","redrawPiece","boardYOffsetBelow","gameBoardCopy","row","filteredRow","filter","val","splice","unshift","checkRows","tetrominos","TetrominoI","TetrominoJ","TetrominoL","TetrominoS","TetrominoZ","TetrominoO","TetrominoT","newTet","Math","floor","random","direction","moveDown","moveRight","moveLeft","spawnTetromino","keyCode","handleRotation","makeMove","_this2","animateLoop","setTimeout","requestAnimationFrame","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","newArray","map","updateOrientation","orientationArray","oldOrientation","newOrientIndex","indexOf","_Tetromino","getPrototypeOf","_Tetromino2","_Tetromino3","_this3","_Tetromino4","_this4","_Tetromino5","_this5","_Tetromino6","_this6","_Tetromino7","_this7"],"mappings":"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","file":"Tetris.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Tetris\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tetris\"] = factory();\n\telse\n\t\troot[\"Tetris\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Tetris\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tetris\"] = factory();\n\telse\n\t\troot[\"Tetris\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Tetrominos = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar KEY = { ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 };\n\tvar coloursMap = {\n\t  'E': 'white',\n\t  'B': '#8CA4D4',\n\t  'O': '#FDCDA7',\n\t  'P': '#C2A1DA',\n\t  'R': '#EF8B8B',\n\t  'Y': '#FAF1A2',\n\t  'C': '#D6E9F8',\n\t  'G': '#C5D9A6'\n\t};\n\t\n\tvar Tetris = function () {\n\t  function Tetris(canvas) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Tetris);\n\t\n\t    this.canvas = canvas;\n\t    this.rows = 20;\n\t    this.columns = 10;\n\t\n\t    this.canvas.height = window.innerHeight;\n\t    this.canvas.width = window.innerHeight / 2;\n\t    this.scaleFactor = this.canvas.height / this.rows;\n\t\n\t    this.ctx = canvas.getContext(\"2d\");\n\t\n\t    this.speed = 3;\n\t    this.score = 0;\n\t\n\t    this.gameBoard = []; //make 10*20 game board\n\t    this.currentTet = {};\n\t\n\t    this.resetGameBoard();\n\t\n\t    document.addEventListener('keydown', function (ev) {\n\t      return _this.keyDown(ev);\n\t    }, false);\n\t    window.addEventListener('resize', function (ev) {\n\t      return _this.resizeCanvas(ev);\n\t    }, false);\n\t  }\n\t\n\t  _createClass(Tetris, [{\n\t    key: 'resetGameBoard',\n\t    value: function resetGameBoard() {\n\t      this.gameBoard = [];\n\t      for (var i = 0; i < this.rows; i++) {\n\t        var rowsTemp = Array(this.columns).fill('E');\n\t        this.gameBoard.push(rowsTemp);\n\t      }\n\t      this.score = 0;\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'resizeCanvas',\n\t    value: function resizeCanvas(ev) {\n\t      this.canvas.height = window.innerHeight;\n\t      this.canvas.width = window.innerHeight / 2;\n\t      this.scaleFactor = this.canvas.height / this.rows;\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'drawRect',\n\t    value: function drawRect(x, y, colour) {\n\t      var scaledX = x * this.scaleFactor;\n\t      var scaledY = y * this.scaleFactor;\n\t      this.ctx.fillStyle = colour;\n\t      this.ctx.fillRect(scaledX, scaledY, this.scaleFactor, this.scaleFactor);\n\t\n\t      this.ctx.strokeStyle = \"white\";\n\t      this.ctx.lineWidth = 0.5;\n\t      this.ctx.strokeRect(scaledX, scaledY, this.scaleFactor, this.scaleFactor);\n\t    }\n\t  }, {\n\t    key: 'drawScore',\n\t    value: function drawScore() {\n\t      this.ctx.font = this.scaleFactor * 0.8 + 'px Karla';\n\t      this.ctx.fillStyle = '#aaaaaa';\n\t      this.ctx.textAlign = 'right';\n\t      this.ctx.fillText(this.score, this.scaleFactor * 9.3, this.scaleFactor * 1.3);\n\t    }\n\t  }, {\n\t    key: 'renderGameBoard',\n\t    value: function renderGameBoard() {\n\t      for (var y = 0; y < this.rows; y++) {\n\t        for (var x = 0; x < this.columns; x++) {\n\t          var colourOfBlock = coloursMap[this.gameBoard[y][x]];\n\t          this.drawRect(x, y, colourOfBlock);\n\t        }\n\t      }\n\t      this.drawScore();\n\t    }\n\t  }, {\n\t    key: 'redrawPiece',\n\t    value: function redrawPiece() {\n\t      this.insertTetromino();\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'validMove',\n\t    value: function validMove(piece) {\n\t      var n = piece.matrix.length;\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = piece.x + x;\n\t          var boardYOffset = piece.y + y;\n\t\n\t          if (piece.matrix[y][x] !== 'E') {\n\t\n\t            //try to get gameboard at board offsets, if exception, then piece is out of bounds\n\t            try {\n\t              var bounds = this.gameBoard[boardYOffset][boardXOffset];\n\t\n\t              if (bounds !== 'E' || boardXOffset === this.columns) {\n\t                throw new Error('hit something');\n\t              }\n\t            } catch (e) {\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'clearTetromino',\n\t    value: function clearTetromino() {\n\t      var n = this.currentTet.matrix.length;\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = this.currentTet.x + x;\n\t          var boardYOffset = this.currentTet.y + y;\n\t          if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = 'E';\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'insertTetromino',\n\t    value: function insertTetromino() {\n\t      var n = this.currentTet.matrix.length;\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = this.currentTet.x + x;\n\t          var boardYOffset = this.currentTet.y + y;\n\t          if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = this.currentTet.matrix[y][x]; //inital check will make sure not out of bounds\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'handleRotation',\n\t    value: function handleRotation() {\n\t      this.clearTetromino();\n\t\n\t      var copyPiece = new _Tetrominos.Tetromino();\n\t      copyPiece.x = this.currentTet.x;\n\t      copyPiece.y = this.currentTet.y;\n\t      copyPiece.matrix = this.currentTet.matrix;\n\t      copyPiece.orientation = this.currentTet.orientation;\n\t\n\t      copyPiece.rotate();\n\t\n\t      if (this.validMove(copyPiece) && this.bottomEmpty(copyPiece)) {\n\t        this.currentTet.rotate();\n\t      }\n\t\n\t      this.redrawPiece();\n\t    }\n\t  }, {\n\t    key: 'bottomEmpty',\n\t    value: function bottomEmpty(piece) {\n\t      var n = piece.matrix.length;\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = piece.x + x;\n\t          var boardYOffsetBelow = piece.y + y + 1;\n\t\n\t          if (piece.matrix[y][x] !== 'E') {\n\t\n\t            //try to get gameboard at board offsets, if exception, then piece is out of bounds\n\t            try {\n\t              var bounds = this.gameBoard[boardYOffsetBelow][boardXOffset];\n\t              if (bounds !== 'E') return false;\n\t            } catch (e) {\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'checkRows',\n\t    value: function checkRows() {\n\t      var gameBoardCopy = this.gameBoard;\n\t\n\t      for (var row = this.rows - 1; row >= 0; row--) {\n\t        var filteredRow = gameBoardCopy[row].filter(function (val) {\n\t          return val === 'E';\n\t        });\n\t\n\t        if (filteredRow.length === 0) {\n\t          this.gameBoard.splice(row, 1);\n\t          var rowsTemp = Array(this.columns).fill('E');\n\t          this.gameBoard.unshift(rowsTemp);\n\t          this.score += 100;\n\t          row++;\n\t        }\n\t      }\n\t\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'spawnTetromino',\n\t    value: function spawnTetromino() {\n\t      this.checkRows();\n\t      this.score += 10;\n\t\n\t      var tetrominos = [new _Tetrominos.TetrominoI(), new _Tetrominos.TetrominoJ(), new _Tetrominos.TetrominoL(), new _Tetrominos.TetrominoS(), new _Tetrominos.TetrominoZ(), new _Tetrominos.TetrominoO(), new _Tetrominos.TetrominoT()];\n\t\n\t      var newTet = tetrominos[Math.floor(Math.random() * tetrominos.length)];\n\t      if (!this.validMove(newTet)) {\n\t        this.resetGameBoard();\n\t      }\n\t\n\t      this.currentTet = newTet;\n\t\n\t      this.insertTetromino();\n\t    }\n\t  }, {\n\t    key: 'makeMove',\n\t    value: function makeMove(direction) {\n\t      this.clearTetromino();\n\t      var copyPiece = new _Tetrominos.Tetromino();\n\t      copyPiece.x = this.currentTet.x;\n\t      copyPiece.y = this.currentTet.y;\n\t      copyPiece.matrix = this.currentTet.matrix;\n\t\n\t      switch (direction) {\n\t        case KEY.DOWN:\n\t          copyPiece.moveDown();\n\t\n\t          if (this.validMove(copyPiece)) {\n\t            this.currentTet.moveDown();\n\t          }\n\t\n\t          break;\n\t        case KEY.RIGHT:\n\t          copyPiece.moveRight();\n\t          if (this.validMove(copyPiece)) {\n\t            this.currentTet.moveRight();\n\t          }\n\t          break;\n\t        case KEY.LEFT:\n\t          copyPiece.moveLeft();\n\t          if (this.validMove(copyPiece)) {\n\t            this.currentTet.moveLeft();\n\t          }\n\t          break;\n\t      }\n\t\n\t      if (!this.bottomEmpty(this.currentTet)) {\n\t        this.insertTetromino();\n\t        this.spawnTetromino();\n\t      } else {\n\t        this.redrawPiece();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'keyDown',\n\t    value: function keyDown(ev) {\n\t      switch (ev.keyCode) {\n\t        case KEY.UP:\n\t          this.handleRotation();\n\t          break;\n\t        case KEY.DOWN:\n\t          this.makeMove(KEY.DOWN);\n\t          break;\n\t        case KEY.RIGHT:\n\t          this.makeMove(KEY.RIGHT);\n\t          break;\n\t        case KEY.LEFT:\n\t          this.makeMove(KEY.LEFT);\n\t          break;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'run',\n\t    value: function run() {\n\t      var _this2 = this;\n\t\n\t      this.currentTet = new _Tetrominos.TetrominoL();\n\t\n\t      this.insertTetromino();\n\t\n\t      this.renderGameBoard();\n\t      window.animateLoop = function () {\n\t\n\t        setTimeout(function () {\n\t          requestAnimationFrame(animateLoop);\n\t\n\t          _this2.makeMove(KEY.DOWN);\n\t          _this2.renderGameBoard();\n\t        }, 1000 / _this2.speed);\n\t      };\n\t\n\t      animateLoop();\n\t    }\n\t  }]);\n\t\n\t  return Tetris;\n\t}();\n\t\n\texports.default = Tetris;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Tetromino = exports.Tetromino = function () {\n\t  function Tetromino() {\n\t    _classCallCheck(this, Tetromino);\n\t\n\t    this.orientation = 'u';\n\t    this.matrix = [];\n\t    this.x = 3;\n\t    this.y = 1;\n\t  }\n\t\n\t  _createClass(Tetromino, [{\n\t    key: 'rotate',\n\t    value: function rotate() {\n\t      var n = this.matrix.length;\n\t\n\t      var newArray = Array(n).fill().map(function () {\n\t        return [];\n\t      });\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          newArray[y][x] = this.matrix[n - x - 1][y];\n\t        }\n\t      }\n\t\n\t      this.matrix = newArray;\n\t\n\t      newArray = [];\n\t      this.updateOrientation();\n\t    }\n\t  }, {\n\t    key: 'updateOrientation',\n\t    value: function updateOrientation() {\n\t      var orientationArray = ['u', 'r', 'd', 'l'];\n\t      var oldOrientation = this.orientation;\n\t\n\t      var newOrientIndex = (orientationArray.indexOf(oldOrientation) + 1) % 4;\n\t      this.orientation = orientationArray[newOrientIndex];\n\t    }\n\t  }, {\n\t    key: 'moveRight',\n\t    value: function moveRight() {\n\t      this.x += 1;\n\t    }\n\t  }, {\n\t    key: 'moveLeft',\n\t    value: function moveLeft() {\n\t      this.x -= 1;\n\t    }\n\t  }, {\n\t    key: 'moveDown',\n\t    value: function moveDown() {\n\t      this.y += 1;\n\t    }\n\t  }]);\n\t\n\t  return Tetromino;\n\t}();\n\t\n\tvar TetrominoL = exports.TetrominoL = function (_Tetromino) {\n\t  _inherits(TetrominoL, _Tetromino);\n\t\n\t  function TetrominoL() {\n\t    _classCallCheck(this, TetrominoL);\n\t\n\t    var _this = _possibleConstructorReturn(this, (TetrominoL.__proto__ || Object.getPrototypeOf(TetrominoL)).call(this));\n\t\n\t    _this.colour = 'B';\n\t    _this.matrix = [['B', 'E', 'E'], ['B', 'B', 'B'], ['E', 'E', 'E']];\n\t    return _this;\n\t  }\n\t\n\t  return TetrominoL;\n\t}(Tetromino);\n\t\n\tvar TetrominoJ = exports.TetrominoJ = function (_Tetromino2) {\n\t  _inherits(TetrominoJ, _Tetromino2);\n\t\n\t  function TetrominoJ() {\n\t    _classCallCheck(this, TetrominoJ);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (TetrominoJ.__proto__ || Object.getPrototypeOf(TetrominoJ)).call(this));\n\t\n\t    _this2.colour = 'J';\n\t    _this2.matrix = [['E', 'E', 'O'], ['O', 'O', 'O'], ['E', 'E', 'E']];\n\t    return _this2;\n\t  }\n\t\n\t  return TetrominoJ;\n\t}(Tetromino);\n\t\n\tvar TetrominoZ = exports.TetrominoZ = function (_Tetromino3) {\n\t  _inherits(TetrominoZ, _Tetromino3);\n\t\n\t  function TetrominoZ() {\n\t    _classCallCheck(this, TetrominoZ);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (TetrominoZ.__proto__ || Object.getPrototypeOf(TetrominoZ)).call(this));\n\t\n\t    _this3.colour = 'R';\n\t    _this3.matrix = [['R', 'R', 'E'], ['E', 'R', 'R'], ['E', 'E', 'E']];\n\t    return _this3;\n\t  }\n\t\n\t  return TetrominoZ;\n\t}(Tetromino);\n\t\n\tvar TetrominoS = exports.TetrominoS = function (_Tetromino4) {\n\t  _inherits(TetrominoS, _Tetromino4);\n\t\n\t  function TetrominoS() {\n\t    _classCallCheck(this, TetrominoS);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (TetrominoS.__proto__ || Object.getPrototypeOf(TetrominoS)).call(this));\n\t\n\t    _this4.colour = 'G';\n\t    _this4.matrix = [['E', 'G', 'G'], ['G', 'G', 'E'], ['E', 'E', 'E']];\n\t    return _this4;\n\t  }\n\t\n\t  return TetrominoS;\n\t}(Tetromino);\n\t\n\tvar TetrominoI = exports.TetrominoI = function (_Tetromino5) {\n\t  _inherits(TetrominoI, _Tetromino5);\n\t\n\t  function TetrominoI() {\n\t    _classCallCheck(this, TetrominoI);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (TetrominoI.__proto__ || Object.getPrototypeOf(TetrominoI)).call(this));\n\t\n\t    _this5.colour = 'C';\n\t    _this5.matrix = [['E', 'E', 'E', 'E'], ['C', 'C', 'C', 'C'], ['E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E']];\n\t    return _this5;\n\t  }\n\t\n\t  return TetrominoI;\n\t}(Tetromino);\n\t\n\tvar TetrominoO = exports.TetrominoO = function (_Tetromino6) {\n\t  _inherits(TetrominoO, _Tetromino6);\n\t\n\t  function TetrominoO() {\n\t    _classCallCheck(this, TetrominoO);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (TetrominoO.__proto__ || Object.getPrototypeOf(TetrominoO)).call(this));\n\t\n\t    _this6.colour = 'Y';\n\t    _this6.matrix = [['Y', 'Y'], ['Y', 'Y']];\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(TetrominoO, [{\n\t    key: 'rotate',\n\t    value: function rotate() {\n\t      // do nothing\n\t    }\n\t  }]);\n\t\n\t  return TetrominoO;\n\t}(Tetromino);\n\t\n\tvar TetrominoT = exports.TetrominoT = function (_Tetromino7) {\n\t  _inherits(TetrominoT, _Tetromino7);\n\t\n\t  function TetrominoT() {\n\t    _classCallCheck(this, TetrominoT);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (TetrominoT.__proto__ || Object.getPrototypeOf(TetrominoT)).call(this));\n\t\n\t    _this7.colour = 'P';\n\t    _this7.matrix = [['P', 'P', 'P'], ['E', 'P', 'E'], ['E', 'E', 'E']];\n\t    return _this7;\n\t  }\n\t\n\t  return TetrominoT;\n\t}(Tetromino);\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** Tetris.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e4d228ce70614ab2deb4\n **/","import {Tetromino, TetrominoL, TetrominoJ, TetrominoZ, TetrominoS, TetrominoI, TetrominoO, TetrominoT} from 'Tetrominos'\n\nconst KEY     = { ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 }\nconst coloursMap = {\n  'E':'white',\n  'B':'#8CA4D4',\n  'O':'#FDCDA7',\n  'P':'#C2A1DA',\n  'R':'#EF8B8B',\n  'Y':'#FAF1A2',\n  'C':'#D6E9F8',\n  'G':'#C5D9A6'\n};\n\nexport default class Tetris {\n\n  constructor(canvas) {\n    this.canvas = canvas\n    this.rows = 20\n    this.columns = 10\n\n    this.canvas.height = window.innerHeight\n    this.canvas.width = (window.innerHeight)/2\n    this.scaleFactor = (this.canvas.height/this.rows)\n\n    this.ctx = canvas.getContext(\"2d\")\n\n    this.speed = 3\n    this.score = 0\n\n    this.gameBoard = []; //make 10*20 game board\n    this.currentTet = {}\n\n    this.resetGameBoard()\n\n    document.addEventListener('keydown', (ev) => this.keyDown(ev), false);\n    window.addEventListener('resize', (ev) => this.resizeCanvas(ev), false);\n\n  }\n\n  resetGameBoard()\n  {\n    this.gameBoard = []\n    for (let i = 0; i < this.rows; i++)\n    {\n      const rowsTemp = Array(this.columns).fill('E')\n      this.gameBoard.push(rowsTemp)\n    }\n    this.score = 0\n    this.renderGameBoard()\n  }\n\n  resizeCanvas(ev)\n  {\n    this.canvas.height = window.innerHeight\n    this.canvas.width = (window.innerHeight)/2\n    this.scaleFactor = (this.canvas.height/this.rows)\n    this.renderGameBoard()\n  }\n\n\n  drawRect(x,y, colour) {\n    const scaledX = x * this.scaleFactor\n    const scaledY = y * this.scaleFactor\n    this.ctx.fillStyle = colour;\n    this.ctx.fillRect(scaledX,scaledY, this.scaleFactor, this.scaleFactor);\n\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.lineWidth   = 0.5;\n    this.ctx.strokeRect(scaledX,scaledY, this.scaleFactor, this.scaleFactor);\n  }\n\n  drawScore()\n  {\n    this.ctx.font = `${this.scaleFactor*0.8}px Karla`\n    this.ctx.fillStyle = '#aaaaaa';\n    this.ctx.textAlign = 'right'\n    this.ctx.fillText(this.score, (this.scaleFactor*9.3), (this.scaleFactor*1.3))\n\n  }\n\n  renderGameBoard()\n  {\n    for (let y = 0; y < this.rows; y++)\n    {\n      for (let x = 0; x < this.columns; x++)\n      {\n        const colourOfBlock = coloursMap[this.gameBoard[y][x]]\n        this.drawRect(x, y, colourOfBlock)\n      }\n    }\n    this.drawScore()\n  }\n\n\n  redrawPiece()\n  {\n    this.insertTetromino()\n    this.renderGameBoard()\n  }\n\n  validMove(piece)\n  {\n    const n = piece.matrix.length\n    for (let y = 0;y < n;y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = piece.x + x\n        const boardYOffset = piece.y + y\n\n        if (piece.matrix[y][x] !== 'E') {\n\n          //try to get gameboard at board offsets, if exception, then piece is out of bounds\n          try {\n            const bounds = this.gameBoard[boardYOffset][boardXOffset]\n\n            if ((bounds !== 'E') || (boardXOffset === this.columns)) {\n              throw new Error('hit something')\n            }\n\n\n          } catch (e) {\n            return false\n          }\n        }\n\n      }\n    }\n\n    return  true\n  }\n\n\n  clearTetromino()\n  {\n    const n = this.currentTet.matrix.length\n    for (let y = 0;y < n;y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = this.currentTet.x + x\n        const boardYOffset = this.currentTet.y + y\n        if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = 'E'\n      }\n    }\n  }\n\n  insertTetromino()\n  {\n    const n = this.currentTet.matrix.length\n    for (let y = 0; y < n; y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = this.currentTet.x + x\n        const boardYOffset = this.currentTet.y + y\n        if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = this.currentTet.matrix[y][x] //inital check will make sure not out of bounds\n\n      }\n    }\n  }\n\n\n\n  handleRotation()\n  {\n    this.clearTetromino();\n\n    let copyPiece = new Tetromino()\n    copyPiece.x = this.currentTet.x\n    copyPiece.y = this.currentTet.y\n    copyPiece.matrix = this.currentTet.matrix\n    copyPiece.orientation = this.currentTet.orientation\n\n    copyPiece.rotate()\n\n    if ((this.validMove(copyPiece)) && (this.bottomEmpty(copyPiece))){\n      this.currentTet.rotate()\n    }\n\n    this.redrawPiece()\n\n  }\n\n\n  bottomEmpty(piece)\n  {\n    const n = piece.matrix.length\n\n    for (let y = 0;y < n;y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = piece.x + x;\n        const boardYOffsetBelow = piece.y + y + 1;\n\n\n        if (piece.matrix[y][x] !== 'E')\n        {\n\n          //try to get gameboard at board offsets, if exception, then piece is out of bounds\n          try {\n            const bounds = this.gameBoard[boardYOffsetBelow][boardXOffset]\n            if (bounds !== 'E') return false\n\n          } catch (e) {\n            return false\n          }\n        }\n      }\n    }\n\n    return true\n\n  }\n\n  checkRows()\n  {\n      let gameBoardCopy = this.gameBoard\n\n      for (let row = this.rows-1 ; row >= 0;row--)\n      {\n        let filteredRow = (gameBoardCopy[row]).filter((val) => {return val === 'E'})\n\n        if (filteredRow.length === 0)\n        {\n          this.gameBoard.splice(row, 1)\n          const rowsTemp = Array(this.columns).fill('E')\n          this.gameBoard.unshift(rowsTemp)\n          this.score += 100\n          row++\n        }\n      }\n\n    this.renderGameBoard()\n  }\n\n  spawnTetromino()\n  {\n    this.checkRows()\n    this.score += 10\n\n    const tetrominos = [new TetrominoI(), new TetrominoJ(), new TetrominoL(), new TetrominoS(), new TetrominoZ(), new TetrominoO(), new TetrominoT()]\n\n    let newTet = tetrominos[Math.floor(Math.random()*tetrominos.length)];\n    if (!this.validMove(newTet)) {\n      this.resetGameBoard()\n    }\n\n    this.currentTet = newTet\n\n    this.insertTetromino()\n  }\n\n  makeMove(direction)\n  {\n    this.clearTetromino()\n    let copyPiece = new Tetromino()\n    copyPiece.x = this.currentTet.x\n    copyPiece.y = this.currentTet.y\n    copyPiece.matrix = this.currentTet.matrix\n\n    switch(direction) {\n      case KEY.DOWN:\n        copyPiece.moveDown()\n\n        if (this.validMove(copyPiece))\n        {\n          this.currentTet.moveDown()\n        }\n\n        break;\n      case KEY.RIGHT:\n        copyPiece.moveRight()\n        if (this.validMove(copyPiece))\n        {\n          this.currentTet.moveRight()\n        }\n        break;\n      case KEY.LEFT:\n        copyPiece.moveLeft()\n        if (this.validMove(copyPiece))\n        {\n          this.currentTet.moveLeft()\n        }\n        break;\n    }\n\n    if (!this.bottomEmpty(this.currentTet))\n    {\n      this.insertTetromino()\n      this.spawnTetromino()\n    }\n    else\n    {\n      this.redrawPiece()\n    }\n\n  }\n\n\n\n\n  keyDown(ev) {\n      switch(ev.keyCode) {\n        case KEY.UP:\n          this.handleRotation();\n          break;\n        case KEY.DOWN:\n          this.makeMove(KEY.DOWN);\n          break;\n        case KEY.RIGHT:\n          this.makeMove(KEY.RIGHT);\n          break;\n        case KEY.LEFT:\n          this.makeMove(KEY.LEFT);\n          break;\n      }\n  }\n\n  run()\n  {\n    this.currentTet = new TetrominoL()\n\n    this.insertTetromino()\n\n\n    this.renderGameBoard()\n    window.animateLoop = () => {\n\n\n      setTimeout(() => {\n        requestAnimationFrame(animateLoop);\n\n        this.makeMove(KEY.DOWN)\n        this.renderGameBoard()\n\n\n      }, 1000 / this.speed);\n    }\n\n    animateLoop()\n  }\n\n}\n\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","export class Tetromino {\n\n  constructor() {\n    this.orientation = 'u'\n    this.matrix = []\n    this.x = 3\n    this.y = 1\n  }\n\n  rotate()\n  {\n    const n = this.matrix.length\n\n    let newArray = Array(n).fill().map(()=> []);\n    \n\n    for(let y = 0; y < n;y++) {\n        for(let x = 0; x < n; x++) {\n          newArray[y][x] = this.matrix[n - x - 1][y];\n        }\n    }\n\n    this.matrix = newArray\n\n    newArray = []\n    this.updateOrientation()\n\n  }\n  \n\n  updateOrientation()\n  {\n    const orientationArray = ['u','r','d','l']\n    const oldOrientation = this.orientation\n    \n    const newOrientIndex = (orientationArray.indexOf(oldOrientation)+1) % 4;\n    this.orientation = orientationArray[newOrientIndex]\n  }\n\n  \n  moveRight(){this.x += 1}\n  moveLeft(){this.x -= 1}\n  moveDown(){this.y += 1}\n\n\n\n\n}\n\nexport class TetrominoL extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'B'\n    this.matrix = [\n        ['B','E','E'],\n        ['B','B','B'],\n        ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoJ extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'J'\n    this.matrix = [\n      ['E','E','O'],\n      ['O','O','O'],\n      ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoZ extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'R'\n    this.matrix = [\n      ['R','R','E'],\n      ['E','R','R'],\n      ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoS extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'G'\n    this.matrix = [\n      ['E','G','G'],\n      ['G','G','E'],\n      ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoI extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'C'\n    this.matrix = [\n      ['E','E','E','E'],\n      ['C','C','C','C'],\n      ['E','E','E','E'],\n      ['E','E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoO extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'Y'\n    this.matrix = [\n      ['Y','Y'],\n      ['Y','Y']\n    ]\n  }\n\n  rotate()\n  {\n    // do nothing\n  }\n}\n\nexport class TetrominoT extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'P'\n    this.matrix = [\n      ['P','P','P'],\n      ['E','P','E'],\n      ['E','E','E']\n    ]\n  }\n  \n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/Tetrominos.js\n **/"],"sourceRoot":""}