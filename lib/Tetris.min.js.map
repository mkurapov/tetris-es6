{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Tetris.min.js","webpack:///webpack/bootstrap bf6dcd8ef52687cf1c20","webpack:///./src/index.js","webpack:///./src/Tetrominos.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_Tetrominos","KEY","ESC","SPACE","LEFT","UP","RIGHT","DOWN","coloursMap","E","B","O","P","R","Y","C","G","Tetris","canvas","_this","rows","columns","height","window","innerHeight","width","scaleFactor","ctx","getContext","speed","gameState","gameBoard","currentTet","rowsTemp","Array","fill","push","document","addEventListener","ev","keyDown","resizeCanvas","renderGameBoard","x","y","colour","scaledX","scaledY","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","colourOfBlock","drawRect","insertTetromino","piece","n","matrix","boardXOffset","boardYOffset","bounds","Error","e","console","log","clearTetromino","copyPiece","Tetromino","orientation","rotate","validMove","redrawPiece","boardYOffsetBelow","gameBoardCopy","row","filteredRow","filter","val","splice","unshift","checkRows","join","tetrominos","TetrominoI","TetrominoJ","TetrominoL","TetrominoS","TetrominoZ","TetrominoO","TetrominoT","tet2","Math","floor","random","direction","moveDown","bottomEmpty","spawnTetromino","moveRight","moveLeft","keyCode","handleRotation","makeMove","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","newArray","updateOrientation","orientationArray","oldOrientation","newOrientIndex","indexOf","_Tetromino","getPrototypeOf","_Tetromino2","_this2","_Tetromino3","_this3","_Tetromino4","_this4","_Tetromino5","_this5","_Tetromino6","_this6","_Tetromino7","_this7"],"mappings":"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","file":"Tetris.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Tetris\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tetris\"] = factory();\n\telse\n\t\troot[\"Tetris\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Tetris\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tetris\"] = factory();\n\telse\n\t\troot[\"Tetris\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Tetrominos = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar KEY = { ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 };\n\tvar coloursMap = {\n\t  'E': 'white',\n\t  'B': '#8CA4D4',\n\t  'O': '#FDCDA7',\n\t  'P': '#C2A1DA',\n\t  'R': '#EF8B8B',\n\t  'Y': '#FAF1A2',\n\t  'C': '#D6E9F8',\n\t  'G': '#C5D9A6'\n\t};\n\t\n\t// 'E':'#f4eded',\n\t\n\tvar Tetris = function () {\n\t  function Tetris(canvas) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Tetris);\n\t\n\t    this.canvas = canvas;\n\t    this.rows = 20;\n\t    this.columns = 10;\n\t\n\t    this.canvas.height = window.innerHeight;\n\t    this.canvas.width = window.innerHeight / 2;\n\t    this.scaleFactor = this.canvas.height / this.rows;\n\t\n\t    this.ctx = canvas.getContext(\"2d\");\n\t\n\t    this.speed = 10;\n\t    this.gameState = 1; //1 playing, 0 over\n\t\n\t    this.gameBoard = []; //make 10*20 game board\n\t    this.currentTet = {};\n\t\n\t    for (var i = 0; i < this.rows; i++) {\n\t      var rowsTemp = Array(this.columns).fill('E');\n\t      this.gameBoard.push(rowsTemp);\n\t    }\n\t\n\t    document.addEventListener('keydown', function (ev) {\n\t      return _this.keyDown(ev);\n\t    }, false);\n\t    window.addEventListener('resize', function (ev) {\n\t      return _this.resizeCanvas(ev);\n\t    }, false);\n\t  }\n\t\n\t  _createClass(Tetris, [{\n\t    key: 'resizeCanvas',\n\t    value: function resizeCanvas(ev) {\n\t      this.canvas.height = window.innerHeight;\n\t      this.canvas.width = window.innerHeight / 2;\n\t      this.scaleFactor = this.canvas.height / this.rows;\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'drawRect',\n\t    value: function drawRect(x, y, colour) {\n\t      var scaledX = x * this.scaleFactor;\n\t      var scaledY = y * this.scaleFactor;\n\t      this.ctx.fillStyle = colour;\n\t      this.ctx.fillRect(scaledX, scaledY, this.scaleFactor, this.scaleFactor);\n\t\n\t      this.ctx.strokeStyle = \"white\";\n\t      this.ctx.lineWidth = 0.5;\n\t      this.ctx.strokeRect(scaledX, scaledY, this.scaleFactor, this.scaleFactor);\n\t    }\n\t  }, {\n\t    key: 'renderGameBoard',\n\t    value: function renderGameBoard() {\n\t\n\t      for (var y = 0; y < this.rows; y++) {\n\t        for (var x = 0; x < this.columns; x++) {\n\t          var colourOfBlock = coloursMap[this.gameBoard[y][x]];\n\t          this.drawRect(x, y, colourOfBlock);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'redrawPiece',\n\t    value: function redrawPiece() {\n\t      this.insertTetromino();\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'validMove',\n\t    value: function validMove(piece) {\n\t      //console.log(piece.matrix.join('\\n'));\n\t      //console.log(piece.x);\n\t      var n = piece.matrix.length;\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = piece.x + x;\n\t          var boardYOffset = piece.y + y;\n\t\n\t          //if (boardXOffset === this.columns) return false\n\t\n\t\n\t          if (this.currentTet.matrix[y][x] !== 'E') {\n\t            //console.log('piece x: '+x+' piece y: '+y);\n\t            //try to get gameboard at board offsets, if exception, then piece is out of bounds\n\t            try {\n\t              var bounds = this.gameBoard[boardYOffset][boardXOffset];\n\t\n\t              if (bounds !== 'E' || boardXOffset === this.columns) {\n\t                throw new Error('hit something');\n\t              }\n\t            } catch (e) {\n\t              console.log('out of index');\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      //console.log('------------');\n\t\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'clearTetromino',\n\t    value: function clearTetromino() {\n\t      var n = this.currentTet.matrix.length;\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = this.currentTet.x + x;\n\t          var boardYOffset = this.currentTet.y + y;\n\t          if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = 'E';\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'insertTetromino',\n\t    value: function insertTetromino() {\n\t\n\t      var n = this.currentTet.matrix.length;\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = this.currentTet.x + x;\n\t          var boardYOffset = this.currentTet.y + y;\n\t          if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = this.currentTet.matrix[y][x]; //inital check will make sure not out of bounds\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'handleRotation',\n\t    value: function handleRotation() {\n\t      this.clearTetromino();\n\t\n\t      var copyPiece = new _Tetrominos.Tetromino();\n\t      copyPiece.x = this.currentTet.x;\n\t      copyPiece.y = this.currentTet.y;\n\t      copyPiece.matrix = this.currentTet.matrix;\n\t      copyPiece.orientation = this.currentTet.orientation;\n\t\n\t      // console.log(copyPiece.matrix.join('\\n'));\n\t\n\t      copyPiece.rotate();\n\t\n\t      // console.log(copyPiece.matrix.join('\\n'));\n\t\n\t      if (this.validMove(copyPiece)) {\n\t        this.currentTet.rotate();\n\t      }\n\t\n\t      this.redrawPiece();\n\t    }\n\t  }, {\n\t    key: 'bottomEmpty',\n\t    value: function bottomEmpty(piece) {\n\t      var n = piece.matrix.length;\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          var boardXOffset = piece.x + x;\n\t          var boardYOffsetBelow = piece.y + y + 1;\n\t\n\t          if (piece.matrix[y][x] !== 'E') {\n\t\n\t            //try to get gameboard at board offsets, if exception, then piece is out of bounds\n\t            try {\n\t              var bounds = this.gameBoard[boardYOffsetBelow][boardXOffset];\n\t              //console.log(boardYOffsetBelow);\n\t              if (bounds !== 'E') return false;\n\t            } catch (e) {\n\t              console.log('out of index');\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'checkRows',\n\t    value: function checkRows() {\n\t      var gameBoardCopy = this.gameBoard;\n\t\n\t      for (var row = this.rows - 1; row >= 0; row--) {\n\t        var filteredRow = gameBoardCopy[row].filter(function (val) {\n\t          return val === 'E';\n\t        });\n\t\n\t        if (filteredRow.length === 0) {\n\t          this.gameBoard.splice(row, 1);\n\t          var rowsTemp = Array(this.columns).fill('E');\n\t          this.gameBoard.unshift(rowsTemp);\n\t          row++;\n\t        }\n\t\n\t        console.log(filteredRow);\n\t      }\n\t\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'spawnTetromino',\n\t    value: function spawnTetromino() {\n\t      this.checkRows();\n\t      console.log(this.gameBoard.join('\\n'));\n\t      var tetrominos = [new _Tetrominos.TetrominoI(), new _Tetrominos.TetrominoJ(), new _Tetrominos.TetrominoL(), new _Tetrominos.TetrominoS(), new _Tetrominos.TetrominoZ(), new _Tetrominos.TetrominoO(), new _Tetrominos.TetrominoT()];\n\t\n\t      var tet2 = tetrominos[Math.floor(Math.random() * tetrominos.length)];\n\t      this.currentTet = tet2;\n\t      this.insertTetromino();\n\t      this.renderGameBoard();\n\t    }\n\t  }, {\n\t    key: 'makeMove',\n\t    value: function makeMove(direction) {\n\t      this.clearTetromino();\n\t      var copyPiece = new _Tetrominos.Tetromino();\n\t      copyPiece.x = this.currentTet.x;\n\t      copyPiece.y = this.currentTet.y;\n\t      copyPiece.matrix = this.currentTet.matrix;\n\t\n\t      switch (direction) {\n\t        case KEY.DOWN:\n\t          copyPiece.moveDown();\n\t\n\t          if (this.validMove(copyPiece)) {\n\t            this.currentTet.moveDown();\n\t            if (!this.bottomEmpty(copyPiece)) {\n\t              this.insertTetromino();\n\t              this.spawnTetromino();\n\t            } else {\n\t              this.redrawPiece();\n\t            }\n\t\n\t            //  console.log(this.gameBoard.join('\\n'));\n\t          }\n\t\n\t          break;\n\t        case KEY.RIGHT:\n\t          copyPiece.moveRight();\n\t          if (this.validMove(copyPiece)) {\n\t            this.currentTet.moveRight();\n\t            this.redrawPiece();\n\t          }\n\t          break;\n\t        case KEY.LEFT:\n\t          copyPiece.moveLeft();\n\t          if (this.validMove(copyPiece)) {\n\t            this.currentTet.moveLeft();\n\t            this.redrawPiece();\n\t          }\n\t          break;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'keyDown',\n\t    value: function keyDown(ev) {\n\t      switch (ev.keyCode) {\n\t        case KEY.UP:\n\t          this.handleRotation();\n\t          break;\n\t        case KEY.DOWN:\n\t          this.makeMove(KEY.DOWN);\n\t          break;\n\t        case KEY.RIGHT:\n\t          this.makeMove(KEY.RIGHT);\n\t          break;\n\t        case KEY.LEFT:\n\t          this.makeMove(KEY.LEFT);\n\t          break;\n\t      }\n\t      //console.clear()\n\t      //console.log(this.gameBoard.join('\\n'));\n\t    }\n\t  }, {\n\t    key: 'run',\n\t    value: function run() {\n\t\n\t      this.currentTet = new _Tetrominos.TetrominoT();\n\t\n\t      this.insertTetromino();\n\t\n\t      this.renderGameBoard();\n\t    }\n\t  }]);\n\t\n\t  return Tetris;\n\t}();\n\t\n\texports.default = Tetris;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Tetromino = exports.Tetromino = function () {\n\t  function Tetromino() {\n\t    _classCallCheck(this, Tetromino);\n\t\n\t    this.orientation = 'u';\n\t    this.matrix = [];\n\t    this.x = 3;\n\t    this.y = 1;\n\t  }\n\t\n\t  _createClass(Tetromino, [{\n\t    key: 'rotate',\n\t    value: function rotate() {\n\t      //console.log('rotating');\n\t      var n = this.matrix.length;\n\t\n\t      var newArray = [];\n\t      for (var i = 0; i < n; i++) {\n\t        var rowsTemp = Array(n).fill();\n\t        newArray.push(rowsTemp);\n\t      }\n\t\n\t      for (var y = 0; y < n; y++) {\n\t        for (var x = 0; x < n; x++) {\n\t          newArray[y][x] = this.matrix[n - x - 1][y];\n\t        }\n\t      }\n\t\n\t      this.matrix = newArray;\n\t      this.updateOrientation();\n\t    }\n\t  }, {\n\t    key: 'updateOrientation',\n\t    value: function updateOrientation() {\n\t      var orientationArray = ['u', 'r', 'd', 'l'];\n\t      var oldOrientation = this.orientation;\n\t\n\t      var newOrientIndex = (orientationArray.indexOf(oldOrientation) + 1) % 4;\n\t      this.orientation = orientationArray[newOrientIndex];\n\t    }\n\t  }, {\n\t    key: 'moveRight',\n\t    value: function moveRight() {\n\t      this.x += 1;\n\t    }\n\t  }, {\n\t    key: 'moveLeft',\n\t    value: function moveLeft() {\n\t      this.x -= 1;\n\t    }\n\t  }, {\n\t    key: 'moveDown',\n\t    value: function moveDown() {\n\t      this.y += 1;\n\t    }\n\t  }]);\n\t\n\t  return Tetromino;\n\t}();\n\t\n\tvar TetrominoL = exports.TetrominoL = function (_Tetromino) {\n\t  _inherits(TetrominoL, _Tetromino);\n\t\n\t  function TetrominoL() {\n\t    _classCallCheck(this, TetrominoL);\n\t\n\t    var _this = _possibleConstructorReturn(this, (TetrominoL.__proto__ || Object.getPrototypeOf(TetrominoL)).call(this));\n\t\n\t    _this.colour = 'B';\n\t    _this.matrix = [['B', 'E', 'E'], ['B', 'B', 'B'], ['E', 'E', 'E']];\n\t    return _this;\n\t  }\n\t\n\t  return TetrominoL;\n\t}(Tetromino);\n\t\n\tvar TetrominoJ = exports.TetrominoJ = function (_Tetromino2) {\n\t  _inherits(TetrominoJ, _Tetromino2);\n\t\n\t  function TetrominoJ() {\n\t    _classCallCheck(this, TetrominoJ);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (TetrominoJ.__proto__ || Object.getPrototypeOf(TetrominoJ)).call(this));\n\t\n\t    _this2.colour = 'J';\n\t    _this2.matrix = [['E', 'E', 'O'], ['O', 'O', 'O'], ['E', 'E', 'E']];\n\t    return _this2;\n\t  }\n\t\n\t  return TetrominoJ;\n\t}(Tetromino);\n\t\n\tvar TetrominoZ = exports.TetrominoZ = function (_Tetromino3) {\n\t  _inherits(TetrominoZ, _Tetromino3);\n\t\n\t  function TetrominoZ() {\n\t    _classCallCheck(this, TetrominoZ);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (TetrominoZ.__proto__ || Object.getPrototypeOf(TetrominoZ)).call(this));\n\t\n\t    _this3.colour = 'R';\n\t    _this3.matrix = [['R', 'R', 'E'], ['E', 'R', 'R'], ['E', 'E', 'E']];\n\t    return _this3;\n\t  }\n\t\n\t  return TetrominoZ;\n\t}(Tetromino);\n\t\n\tvar TetrominoS = exports.TetrominoS = function (_Tetromino4) {\n\t  _inherits(TetrominoS, _Tetromino4);\n\t\n\t  function TetrominoS() {\n\t    _classCallCheck(this, TetrominoS);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (TetrominoS.__proto__ || Object.getPrototypeOf(TetrominoS)).call(this));\n\t\n\t    _this4.colour = 'G';\n\t    _this4.matrix = [['E', 'G', 'G'], ['G', 'G', 'E'], ['E', 'E', 'E']];\n\t    return _this4;\n\t  }\n\t\n\t  return TetrominoS;\n\t}(Tetromino);\n\t\n\tvar TetrominoI = exports.TetrominoI = function (_Tetromino5) {\n\t  _inherits(TetrominoI, _Tetromino5);\n\t\n\t  function TetrominoI() {\n\t    _classCallCheck(this, TetrominoI);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (TetrominoI.__proto__ || Object.getPrototypeOf(TetrominoI)).call(this));\n\t\n\t    _this5.colour = 'C';\n\t    _this5.matrix = [['E', 'E', 'E', 'E'], ['C', 'C', 'C', 'C'], ['E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E']];\n\t    return _this5;\n\t  }\n\t\n\t  return TetrominoI;\n\t}(Tetromino);\n\t\n\tvar TetrominoO = exports.TetrominoO = function (_Tetromino6) {\n\t  _inherits(TetrominoO, _Tetromino6);\n\t\n\t  function TetrominoO() {\n\t    _classCallCheck(this, TetrominoO);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (TetrominoO.__proto__ || Object.getPrototypeOf(TetrominoO)).call(this));\n\t\n\t    _this6.colour = 'Y';\n\t    _this6.matrix = [['Y', 'Y'], ['Y', 'Y']];\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(TetrominoO, [{\n\t    key: 'rotate',\n\t    value: function rotate() {\n\t      // do nothing\n\t    }\n\t  }]);\n\t\n\t  return TetrominoO;\n\t}(Tetromino);\n\t\n\tvar TetrominoT = exports.TetrominoT = function (_Tetromino7) {\n\t  _inherits(TetrominoT, _Tetromino7);\n\t\n\t  function TetrominoT() {\n\t    _classCallCheck(this, TetrominoT);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (TetrominoT.__proto__ || Object.getPrototypeOf(TetrominoT)).call(this));\n\t\n\t    _this7.colour = 'P';\n\t    _this7.matrix = [['P', 'P', 'P'], ['E', 'P', 'E'], ['E', 'E', 'E']];\n\t    return _this7;\n\t  }\n\t\n\t  return TetrominoT;\n\t}(Tetromino);\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** Tetris.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bf6dcd8ef52687cf1c20\n **/","import {Tetromino, TetrominoL, TetrominoJ, TetrominoZ, TetrominoS, TetrominoI, TetrominoO, TetrominoT} from 'Tetrominos'\n\nconst KEY     = { ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 }\nconst coloursMap = {\n  'E':'white',\n  'B':'#8CA4D4',\n  'O':'#FDCDA7',\n  'P':'#C2A1DA',\n  'R':'#EF8B8B',\n  'Y':'#FAF1A2',\n  'C':'#D6E9F8',\n  'G':'#C5D9A6'\n};\n\n// 'E':'#f4eded',\n\nexport default class Tetris {\n\n  constructor(canvas) {\n    this.canvas = canvas\n    this.rows = 20\n    this.columns = 10\n\n    this.canvas.height = window.innerHeight\n    this.canvas.width = (window.innerHeight)/2\n    this.scaleFactor = (this.canvas.height/this.rows)\n\n    this.ctx = canvas.getContext(\"2d\")\n\n    this.speed = 10\n    this.gameState = 1 //1 playing, 0 over\n\n    this.gameBoard = []; //make 10*20 game board\n    this.currentTet = {}\n\n    for (let i = 0; i < this.rows; i++)\n    {\n      const rowsTemp = Array(this.columns).fill('E')\n      this.gameBoard.push(rowsTemp)\n    }\n\n    document.addEventListener('keydown', (ev) => this.keyDown(ev), false);\n    window.addEventListener('resize', (ev) => this.resizeCanvas(ev), false);\n\n  }\n\n  resizeCanvas(ev)\n  {\n    this.canvas.height = window.innerHeight\n    this.canvas.width = (window.innerHeight)/2\n    this.scaleFactor = (this.canvas.height/this.rows)\n    this.renderGameBoard()\n  }\n\n\n  drawRect(x,y, colour) {\n    const scaledX = x * this.scaleFactor\n    const scaledY = y * this.scaleFactor\n    this.ctx.fillStyle = colour;\n    this.ctx.fillRect(scaledX,scaledY, this.scaleFactor, this.scaleFactor);\n\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.lineWidth   = 0.5;\n    this.ctx.strokeRect(scaledX,scaledY, this.scaleFactor, this.scaleFactor);\n  }\n\n\n  renderGameBoard()\n  {\n\n\n\n    for (let y = 0; y < this.rows; y++)\n    {\n      for (let x = 0; x < this.columns; x++)\n      {\n        const colourOfBlock = coloursMap[this.gameBoard[y][x]]\n        this.drawRect(x, y, colourOfBlock)\n      }\n    }\n  }\n\n\n  redrawPiece()\n  {\n    this.insertTetromino()\n    this.renderGameBoard()\n  }\n\n  validMove(piece)\n  {\n    //console.log(piece.matrix.join('\\n'));\n    //console.log(piece.x);\n    const n = piece.matrix.length\n\n\n    for (let y = 0;y < n;y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = piece.x + x\n        const boardYOffset = piece.y + y\n\n\n        //if (boardXOffset === this.columns) return false\n\n\n        if (this.currentTet.matrix[y][x] !== 'E')\n        {\n          //console.log('piece x: '+x+' piece y: '+y);\n          //try to get gameboard at board offsets, if exception, then piece is out of bounds\n          try {\n            const bounds = this.gameBoard[boardYOffset][boardXOffset]\n\n            if ((bounds !== 'E')||(boardXOffset === this.columns)) {throw new Error('hit something')}\n\n          } catch (e) {\n            console.log('out of index');\n            return false\n          }\n        }\n\n      }\n    }\n\n    //console.log('------------');\n\n\n    return  true\n\n\n\n  }\n\n\n  clearTetromino()\n  {\n    const n = this.currentTet.matrix.length\n\n    for (let y = 0;y < n;y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = this.currentTet.x + x\n        const boardYOffset = this.currentTet.y + y\n        if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = 'E'\n      }\n    }\n  }\n\n  insertTetromino()\n  {\n\n    const n = this.currentTet.matrix.length\n\n\n    for (let y = 0; y < n; y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = this.currentTet.x + x\n        const boardYOffset = this.currentTet.y + y\n        if (this.currentTet.matrix[y][x] !== 'E') this.gameBoard[boardYOffset][boardXOffset] = this.currentTet.matrix[y][x] //inital check will make sure not out of bounds\n\n      }\n    }\n  }\n\n\n\n  handleRotation()\n  {\n    this.clearTetromino();\n\n    let copyPiece = new Tetromino()\n    copyPiece.x = this.currentTet.x\n    copyPiece.y = this.currentTet.y\n    copyPiece.matrix = this.currentTet.matrix\n    copyPiece.orientation = this.currentTet.orientation\n\n   // console.log(copyPiece.matrix.join('\\n'));\n\n    copyPiece.rotate()\n\n   // console.log(copyPiece.matrix.join('\\n'));\n\n    if (this.validMove(copyPiece))  {this.currentTet.rotate()}\n\n\n    this.redrawPiece()\n  }\n\n\n  bottomEmpty(piece)\n  {\n    const n = piece.matrix.length\n\n    for (let y = 0;y < n;y++)\n    {\n      for (let x = 0; x < n; x++)\n      {\n        const boardXOffset = piece.x + x;\n        const boardYOffsetBelow = piece.y + y + 1;\n\n\n        if (piece.matrix[y][x] !== 'E')\n        {\n\n          //try to get gameboard at board offsets, if exception, then piece is out of bounds\n          try {\n            const bounds = this.gameBoard[boardYOffsetBelow][boardXOffset]\n            //console.log(boardYOffsetBelow);\n            if (bounds !== 'E') return false\n\n          } catch (e) {\n            console.log('out of index');\n            return false\n          }\n        }\n      }\n    }\n\n    return true\n\n  }\n\n  checkRows()\n  {\n      let gameBoardCopy = this.gameBoard\n\n      for (let row = this.rows-1 ; row >= 0;row--)\n      {\n        let filteredRow = (gameBoardCopy[row]).filter((val) => {return val === 'E'})\n\n        if (filteredRow.length === 0)\n        {\n          this.gameBoard.splice(row, 1)\n          const rowsTemp = Array(this.columns).fill('E')\n          this.gameBoard.unshift(rowsTemp)\n          row++\n        }\n\n        console.log(filteredRow);\n      }\n\n    this.renderGameBoard()\n  }\n\n\n  spawnTetromino()\n  {\n    this.checkRows()\n    console.log(this.gameBoard.join('\\n'));\n    const tetrominos = [new TetrominoI(), new TetrominoJ(), new TetrominoL(), new TetrominoS(), new TetrominoZ(), new TetrominoO(), new TetrominoT()]\n\n    let tet2 = tetrominos[Math.floor(Math.random()*tetrominos.length)];\n    this.currentTet = tet2\n    this.insertTetromino()\n    this.renderGameBoard()\n  }\n\n  makeMove(direction)\n  {\n    this.clearTetromino()\n    let copyPiece = new Tetromino()\n    copyPiece.x = this.currentTet.x\n    copyPiece.y = this.currentTet.y\n    copyPiece.matrix = this.currentTet.matrix\n\n\n    switch(direction) {\n      case KEY.DOWN:\n        copyPiece.moveDown()\n\n        if (this.validMove(copyPiece))\n        {\n          this.currentTet.moveDown()\n          if (!this.bottomEmpty(copyPiece))\n          {\n            this.insertTetromino()\n            this.spawnTetromino()\n          }\n          else\n          {\n            this.redrawPiece()\n          }\n\n        //  console.log(this.gameBoard.join('\\n'));\n\n        }\n\n        break;\n      case KEY.RIGHT:\n        copyPiece.moveRight()\n        if (this.validMove(copyPiece))\n        {\n          this.currentTet.moveRight()\n          this.redrawPiece()\n        }\n        break;\n      case KEY.LEFT:\n        copyPiece.moveLeft()\n        if (this.validMove(copyPiece))\n        {\n          this.currentTet.moveLeft()\n          this.redrawPiece()\n        }\n        break;\n    }\n\n\n\n\n  }\n\n\n\n\n  keyDown(ev) {\n      switch(ev.keyCode) {\n        case KEY.UP:\n          this.handleRotation();\n          break;\n        case KEY.DOWN:\n          this.makeMove(KEY.DOWN);\n          break;\n        case KEY.RIGHT:\n          this.makeMove(KEY.RIGHT);\n          break;\n        case KEY.LEFT:\n          this.makeMove(KEY.LEFT);\n          break;\n      }\n    //console.clear()\n    //console.log(this.gameBoard.join('\\n'));\n  }\n\n  run()\n  {\n\n\n    this.currentTet = new TetrominoT()\n\n    this.insertTetromino()\n\n\n    this.renderGameBoard()\n\n\n\n\n\n\n  }\n\n}\n\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","export class Tetromino {\n\n  constructor() {\n    this.orientation = 'u'\n    this.matrix = []\n    this.x = 3\n    this.y = 1\n  }\n\n  rotate()\n  {\n    //console.log('rotating');\n    const n = this.matrix.length\n\n    let newArray = []\n    for (let i = 0; i < n; i++)\n    {\n      const rowsTemp = Array(n).fill()\n      newArray.push(rowsTemp)\n    }\n\n\n\n\n\n\n    for(let y = 0; y < n;y++) {\n        for(let x = 0; x < n; x++) {\n          newArray[y][x] = this.matrix[n - x - 1][y];\n        }\n    }\n\n    this.matrix = newArray\n    this.updateOrientation()\n\n  }\n  \n\n  updateOrientation()\n  {\n    const orientationArray = ['u','r','d','l']\n    const oldOrientation = this.orientation\n    \n    const newOrientIndex = (orientationArray.indexOf(oldOrientation)+1) % 4;\n    this.orientation = orientationArray[newOrientIndex]\n  }\n\n  \n  moveRight(){this.x += 1}\n  moveLeft(){this.x -= 1}\n  moveDown(){this.y += 1}\n\n\n\n\n}\n\nexport class TetrominoL extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'B'\n    this.matrix = [\n        ['B','E','E'],\n        ['B','B','B'],\n        ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoJ extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'J'\n    this.matrix = [\n      ['E','E','O'],\n      ['O','O','O'],\n      ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoZ extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'R'\n    this.matrix = [\n      ['R','R','E'],\n      ['E','R','R'],\n      ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoS extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'G'\n    this.matrix = [\n      ['E','G','G'],\n      ['G','G','E'],\n      ['E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoI extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'C'\n    this.matrix = [\n      ['E','E','E','E'],\n      ['C','C','C','C'],\n      ['E','E','E','E'],\n      ['E','E','E','E']\n    ]\n  }\n}\n\nexport class TetrominoO extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'Y'\n    this.matrix = [\n      ['Y','Y'],\n      ['Y','Y']\n    ]\n  }\n\n  rotate()\n  {\n    // do nothing\n  }\n}\n\nexport class TetrominoT extends Tetromino\n{\n  constructor() {\n    super()\n    this.colour = 'P'\n    this.matrix = [\n      ['P','P','P'],\n      ['E','P','E'],\n      ['E','E','E']\n    ]\n  }\n  \n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/Tetrominos.js\n **/"],"sourceRoot":""}