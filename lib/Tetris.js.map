{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d528fc5ba6fc9250a475","webpack:///./src/index.js"],"names":["Tetris","canvas","ctx","getContext","scaleFactor","rows","columns","gameBoard","i","rowsTemp","Array","fill","push","x","y","colour","scaledX","scaledY","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","rand","getRandomInt","console","log","coloursMap","j","colourOfBlock","drawRect","min","max","Math","ceil","floor","random","renderGameBoard"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;KCtCqBA,M;AAEnB,mBAAYC,MAAZ,EAAoB;AAAA;;AAClB,UAAKC,GAAL,GAAWD,OAAOE,UAAP,CAAkB,IAAlB,CAAX;AACA,UAAKC,WAAL,GAAmB,EAAnB;AACA,UAAKC,IAAL,GAAY,EAAZ;AACA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,SAAL,GAAiB,EAAjB,CALkB,CAKG;AACrB,UAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKH,IAAzB,EAA+BG,GAA/B,EACA;AACE,WAAMC,WAAWC,MAAM,KAAKJ,OAAX,EAAoBK,IAApB,CAAyB,GAAzB,CAAjB;AACA,YAAKJ,SAAL,CAAeK,IAAf,CAAoBH,QAApB;AACD;AAEF;;;;8BACQI,C,EAAEC,C,EAAGC,M,EAAQ;AACpB,WAAMC,UAAUH,IAAI,KAAKT,WAAzB;AACA,WAAMa,UAAUH,IAAI,KAAKV,WAAzB;AACA,YAAKF,GAAL,CAASgB,SAAT,GAAqBH,UAAU,MAA/B;AACA,YAAKb,GAAL,CAASiB,QAAT,CAAkBH,OAAlB,EAA0BC,OAA1B,EAAmC,KAAKb,WAAxC,EAAqD,KAAKA,WAA1D;;AAEA,YAAKF,GAAL,CAASkB,WAAT,GAAuB,OAAvB;AACA,YAAKlB,GAAL,CAASmB,SAAT,GAAuB,GAAvB;AACA,YAAKnB,GAAL,CAASoB,UAAT,CAAoBN,OAApB,EAA4BC,OAA5B,EAAqC,KAAKb,WAA1C,EAAuD,KAAKA,WAA5D;AACD;;;uCAGD;AACE,WAAMmB,OAAO,KAAKC,YAAL,CAAkB,CAAlB,EAAqB,KAAKlB,OAA1B,CAAb;AACAmB,eAAQC,GAAR,CAAYH,IAAZ;AACA,YAAKhB,SAAL,CAAe,CAAf,EAAkBgB,IAAlB,IAA0B,GAA1B;;AAGA,WAAMI,aAAa;AACjB,cAAI,MADa;AAEjB,cAAI,SAFa;AAGjB,cAAI,SAHa;AAIjB,cAAI,SAJa;AAKjB,cAAI,SALa;AAMjB,cAAI,SANa;AAOjB,cAAI;AAPa,QAAnB;;AAUA,YAAK,IAAInB,IAAI,CAAb,EAAgBA,IAAI,KAAKH,IAAzB,EAA+BG,GAA/B,EACA;AACE,cAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,OAAzB,EAAkCsB,GAAlC,EACA;AACE,eAAMC,gBAAgBF,WAAW,KAAKpB,SAAL,CAAeC,CAAf,EAAkBoB,CAAlB,CAAX,CAAtB;AACA,gBAAKE,QAAL,CAAcF,CAAd,EAAiBpB,CAAjB,EAAoBqB,aAApB;AACD;AACF;AACF;;;kCAGYE,G,EAAKC,G,EAAK;AACrBD,aAAME,KAAKC,IAAL,CAAUH,GAAV,CAAN;AACAC,aAAMC,KAAKE,KAAL,CAAWH,GAAX,CAAN;AACA,cAAOC,KAAKE,KAAL,CAAWF,KAAKG,MAAL,MAAiBJ,MAAMD,GAAvB,CAAX,IAA0CA,GAAjD;AACD;;;2BAED;;AAEA,YAAKM,eAAL;AACC;;;;;;mBA/DkBrC,M","file":"Tetris.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Tetris\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tetris\"] = factory();\n\telse\n\t\troot[\"Tetris\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d528fc5ba6fc9250a475\n **/","export default class Tetris {\n\n  constructor(canvas) {\n    this.ctx = canvas.getContext(\"2d\");\n    this.scaleFactor = 32\n    this.rows = 20\n    this.columns = 10\n    this.gameBoard = []; //make 10*20 game board\n    for (let i = 0; i < this.rows; i++)\n    {\n      const rowsTemp = Array(this.columns).fill('E')\n      this.gameBoard.push(rowsTemp)\n    }\n\n  }\n  drawRect(x,y, colour) {\n    const scaledX = x * this.scaleFactor\n    const scaledY = y * this.scaleFactor\n    this.ctx.fillStyle = colour || 'pink'\n    this.ctx.fillRect(scaledX,scaledY, this.scaleFactor, this.scaleFactor);\n\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.lineWidth   = 0.5;\n    this.ctx.strokeRect(scaledX,scaledY, this.scaleFactor, this.scaleFactor);\n  }\n\n  renderGameBoard()\n  {\n    const rand = this.getRandomInt(0, this.columns);\n    console.log(rand);\n    this.gameBoard[0][rand] = 'B'\n\n\n    const coloursMap = {\n      'E':'pink',\n      'B':'#8CA4D4',\n      'O':'#FDCDA7',\n      'P':'#C2A1DA',\n      'R':'#EF8B8B',\n      'Y':'#FAF1A2',\n      'C':'#D6E9F8'\n    };\n\n    for (let i = 0; i < this.rows; i++)\n    {\n      for (let j = 0; j < this.columns; j++)\n      {\n        const colourOfBlock = coloursMap[this.gameBoard[i][j]]\n        this.drawRect(j, i, colourOfBlock)\n      }\n    }\n  }\n\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  run()\n  {\n\n  this.renderGameBoard()\n  }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/"],"sourceRoot":""}